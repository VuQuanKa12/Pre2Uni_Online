@using JOT23_Pre2UniOnline.Services
@using JOT23_Pre2UniOnline.DatAccess
@{
	ViewBag.room = "meet";
	ViewBag.title = "Meet Room";
}
<!DOCTYPE html>
<html lang="en">

<head>
	<link href="~/css/MettingRoom.css" rel="stylesheet">
	@Html.Partial("_head")

	<style>
		body, html {
			height: 100%;
			margin: 0;
		}

		.card {
			position: fixed;
			top: 50%;
			right: 0;
			width: inherit;
			height: 100%;
			transform: translateY(-50%);
		}
	</style>
	<meta charset="UTF-8">
</head>
<body>
	@Html.Partial("_spanner")
	<!--<h1 style="text-align: center">@ViewBag.roomid</h1>-->
	<div class="container-fluid m-0 p-0 row" style="--bs-gutter-x: 0 !important;">
		<div class="col-md-9 col-sm-9 position-relative min-vh-100 row" id="meet-layout">
			<div video-grid class="col-md-12">
				<div id="screen-share-container" class="box screen-share-container">
					<video id="share-screen" style="height: auto !important"></video>
				</div>
			</div>
			<div class="col-md-12 w-100 button-container fixed-bottom  row" style="background: #4d8347; padding: 0.5% 0">
				<div my-video class="w-3 col-4">
				</div>
				<div class="col-7 row container">
					<div class="col-7 container d-flex justify-content-center">
						<form action="@Url.Action("Index", "Home")" method="post">
							<button type="button" class="btn btn-primary rounded p-3 m-1 fs-5 rounded-circle" id="toggle-microphone"><i class="bi bi-mic" id="microphone"></i></button>
							<button type="button" class="btn btn-primary rounded p-3 m-1 fs-5 rounded-circle" id="toggle-camera"><i class="bi bi-camera-video" id="camera"></i></button>
							<button type="submit"
									class="btn btn-primary rounded p-3 m-1 fs-5 rounded-circle">
								<i class="bi bi-telephone" id="phone"></i>
							</button>
							@if (ViewBag.role == 2)
							{
								<button type="button" class="btn btn-primary rounded p-3 m-1 fs-5 rounded-circle" id="toggle-screen-share"><i class="bi bi-aspect-ratio-fill"></i></button>
							}
						</form>
					</div>
					<div class="col-4 d-flex justify-content-center ">
						<button class="btn btn-primary rounded p-3 m-1" id="btnBox"><i class="bi bi-chat-square-dots"></i></button>
					</div>
				</div>
			</div>
		</div>
		<div class="col-md-3 col-sm-3 min-vh-100 col min-vh-100" id="chat-dictionary" data-wow-delay="0.1s">
			<div class="card-header row">
				<button id="btnChatBox" class="btn btn-primary col-6" style="border-radius: 30px 0 0 30px;">Chat Box</button>

				<button id="btnDictionary" class="btn btn-primary col-6" style="border-radius: 0 30px 30px 0;">Dictionary</button>
			</div>

			<div id="chatboxcard" class="card-body" style="position: relative;">
				<div id="messagesList" class="card-body" style="height: 75vh; overflow-y: auto; padding-bottom:30px;"></div>

				<div class="card-footer" style="position: absolute;bottom: 0; left: 0;  width: 100%;">
					<div class="input-group" style="display: flex;">
						<input id="messageInput" type="text" class="form-control border-0 rounded-pill" placeholder="Type your message">
						<div class="input-group-append" style="margin-left: auto;">
							<button id="sendButton" class="btn btn-primary rounded-pill">Send</button>
						</div>
					</div>
				</div>
			</div>

			<div id="dictionarycard" class="card-body" style="display: none;">
				<div id="contentDictionary" class="card-body" style="height: 60vh; overflow-y: auto;">
					<h6 id="title" class="text-primary m-0 text-center text-decoration-underline"></h6>
					<div id="phonetic"></div>
					<div id="meaning"></div>
				</div>

				<div class="card-footer">
					<div class="input-group">
						<!--<button type="button" class="btn btn-primary rounded-pill py-2 px-4 position-absolute top-0 end-0 me-2" style="margin-top: 7px;">Search</button>-->
						<input class="form-control border-0 rounded-pill w-100 py-3 ps-4 pe-5" id="word" type="text" value="@ViewBag.word" placeholder="Eg: Vocabulary">
					</div>
				</div>
			</div>
		</div>
	</div>


	<script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
	<script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>
	<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
	<script src="~/js/DictionaryMeet.js"></script>
	@Html.Partial("_endScript")

	<script>
		const RoomID = '@ViewBag.roomid';
		let userId = "";
		let localStream = null;
		const Peers = {};
		const Mutes = {};
		var listUserVideo = {}
		var mic = document.querySelector("#microphone");
		var cam = document.querySelector("#camera");
		// Create a new signalR connection
		var connection = new signalR.HubConnectionBuilder().withUrl("/meeting").build();

		const myPeer = new Peer();

		myPeer.on('open', id => {
			userId = id;
			const startSignalR = async () => {
				await connection.start();
				await connection.invoke("JoinRoom", RoomID, userId);
			};
			startSignalR(); // Start SignalR connection
		});

		const screenShareContainer = document.querySelector('#screen-share-container');
		const screenVideo = document.querySelector('#share-screen');
		const videoGrid = document.querySelector('[video-grid]');
		const MYvideoGrid = document.querySelector('[my-video]');
		const myVideo = document.createElement('video');
		myVideo.id = "mainMyVideo";
		myVideo.muted = true;

		navigator.mediaDevices.getUserMedia({
			audio: true,
			video: true
		}).then(stream => {
			addMyVideoStream(myVideo, stream);
			localStream = stream;
		});

		// Event when a new user connects
		connection.on('user-connected', (id) => {
			if (userId === id) return;
			console.log("User connected: " + id);
			connectNewUser(id, localStream);
		});

		// Mute microphone
		connection.on("MuteMicrophone", (id) => {
			if (Peers[id]?.userVideo) {
				Peers[id].userVideo.srcObject.getAudioTracks().forEach(track => {
					track.enabled = false;
				});
				console.log(Peers[id].userVideo.parentNode.querySelector("i"));
				Peers[id].userVideo.parentNode.querySelector("i").classList.add("d-none");
			}
		});

		// Unmute microphone
		connection.on("UnmuteMicrophone", (id) => {
			if (Peers[id]?.userVideo) {
				Peers[id].userVideo.srcObject.getAudioTracks().forEach(track => {
					track.enabled = true;
				});
				console.log(Peers[id].userVideo.parentNode.querySelector("i"));
				Peers[id].userVideo.parentNode.querySelector("i").classList.remove("d-none");
			}
		});

		// Mute camera
		connection.on("MuteCamera", (id) => {
			if (Peers[id]?.userVideo) {
				Peers[id].userVideo.srcObject.getVideoTracks().forEach(track => {
					track.enabled = false;
				});
			}
		});

		// Unmute camera
		connection.on("UnmuteCamera", (id) => {
			if (Peers[id]?.userVideo) {
				Peers[id].userVideo.srcObject.getVideoTracks().forEach(track => {
					track.enabled = true;
				});
			}
		});

		// Event when a user disconnects
		connection.on('user-disconnected', (id) => {
			console.log("User disconnected: " + id);
			if (Peers[id]?.call) {
				Peers[id].call.close();
				delete listUserVideo[id]
				delete Peers[id];
			}
		});

		// Event when a user starts screen sharing
		connection.on('start_screen_share', (id, jsonData) => {
			try {
				const tracks = JSON.parse(jsonData);
				console.log("Someone started screen sharing: " + id);
				if (Peers[id]?.userVideo) {
					Peers[id].userVideo.srcObject = null;
					Peers[id].userVideo.parentNode.removeChild(Peers[id].userVideo);
					delete Peers[id].userVideo;
				}
				if (Peers[id]?.screenShareVideo) {
					Peers[id].screenShareVideo.srcObject = null;
					Peers[id].screenShareVideo.parentNode.removeChild(Peers[id].screenShareVideo);
					delete Peers[id].screenShareVideo;
				}
				const newStream = new MediaStream();
				tracks.forEach(trackInfo => {
					const { id, kind, label, muted, enabled, readyState } = trackInfo;
					const constraints = { id, kind, label, muted, enabled, readyState };
					navigator.mediaDevices.getUserMedia(constraints)
						.then(mediaStream => {
							const track = mediaStream.getTracks()[0];
							newStream.addTrack(track);
						})
						.catch(error => {
							console.error('Error adding track to new stream:', error);
						});
				});
				startShare(newStream);
			} catch (ex) {
				console.error(ex);
			}
		});

		// Event when a user stops screen sharing
		connection.on('stop-screen-share', (id) => {
			console.log("Someone stopped screen sharing: " + id);
			if (Peers[id]?.screenShareVideo) {
				const screenShareVideo = Peers[id].screenShareVideo;
				screenShareVideo.srcObject.getTracks().forEach(track => track.stop());
				screenShareVideo.parentNode.removeChild(screenShareVideo);
				delete Peers[id].screenShareVideo;
			}
		});

		// Event when a new user joins the room
		myPeer.on('call', call => {
			call.answer(localStream);

			const userVideo = document.createElement('video');
			userVideo.id = call.peer;

			call.on('stream', userVideoStream => {
				addVideoStream(userVideo, userVideoStream, userId);
			});
		});

		// Add new video stream
		const addVideoStream = (video, stream, id) => {
			video.srcObject = stream;
			video.addEventListener('loadedmetadata', () => {
				video.play();
			});
			if (listUserVideo[id]) {
				var box = listUserVideo[id];
				box.appendChild(video);
			}
			else {
				var box = document.createElement("div");
				box.setAttribute("class", "box");
				var icon = document.createElement("i");
				icon.setAttribute("class", "bi bi-mic-mute position-absolute fs-1 text-success bg-dark p-3 rounded-circle d-none top-0 end-0")
				box.appendChild(video);
				box.appendChild(icon);
				videoGrid.appendChild(box);
				listUserVideo[id] = box;
			}
		};

		// Add local video stream
		const addMyVideoStream = (video, stream) => {
			video.srcObject = stream;
			video.addEventListener('loadedmetadata', () => {
				video.play();
			});
			MYvideoGrid.appendChild(video);
		};

		// Connect with a new user in the room
		const connectNewUser = (userId, localStream) => {
			const userVideo = document.createElement('video');
			const call = myPeer.call(userId, localStream);

			call.userVideo = userVideo;

			call.on('stream', userVideoStream => {
				addVideoStream(userVideo, userVideoStream, userId);
			});

			call.on('close', () => {
				console.log("Someone left the room");
				userVideo.parentNode.parentNode.removeChild(userVideo.parentNode);
				delete Peers[userId]; // Remove the user from Peers when they leave the room
			});

			Peers[userId] = { call, userVideo };
		};

		// Toggle microphone state
		var micBtn = document.getElementById('toggle-microphone');
		micBtn.addEventListener('click', () => {
			if (localStream) {
				const audioTrack = localStream.getAudioTracks()[0];

				if (audioTrack) {
					audioTrack.enabled = !audioTrack.enabled; // Toggle audio track enabled state
					micBtn.classList.toggle('mute'); // Toggle CSS class for button styling

					// Send microphone state to other users in the room
					if (audioTrack.enabled) {
						mic.setAttribute("class", "bi-mic");
						connection.invoke("UnmuteMicrophone", userId, RoomID);
					} else {
						mic.setAttribute("class", "bi-mic-mute text-danger");
						connection.invoke("MuteMicrophone", userId, RoomID);
					}
				}
			}
		});

		// Toggle camera state
		var cameraBtn = document.getElementById('toggle-camera');
		cameraBtn.addEventListener('click', () => {
			if (localStream) {
				const videoTrack = localStream.getVideoTracks()[0];

				if (videoTrack) {
					videoTrack.enabled = !videoTrack.enabled; // Toggle video track enabled state
					cameraBtn.classList.toggle('camera-off'); // Toggle CSS class for button styling

					// Send camera state to other users in the room
					if (videoTrack.enabled) {
						cam.setAttribute("class", "bi-camera-video")
						myVideo.style.display = "block";
						connection.invoke("UnmuteCamera", userId, RoomID);
					} else {
						cam.setAttribute("class", "bi-camera-video-off text-danger");
						myVideo.style.display = "none";
						connection.invoke("MuteCamera", userId, RoomID);
					}
				}
			}
		});
		var screenTrackShareScreen;
		var screenShareBtn = document.getElementById('toggle-screen-share');
		var isShareScreen = false;
		screenShareBtn.addEventListener('click', () => {
			if (!isShareScreen) {
				startScreenSharing();
			} else {
				screenTrackShareScreen.stop();
				screenShareContainer.style.display = 'none';
			}
			isShareScreen = !isShareScreen;
		});

		// Function to start screen sharing
		const startScreenSharing = () => {
			navigator.mediaDevices.getDisplayMedia({ video: true })
				.then(stream => {
					const tracks = stream.getTracks().map(track => ({
						id: track.id,
						kind: track.kind,
						label: track.label,
						muted: track.muted,
						enabled: track.enabled,
						readyState: track.readyState
					}));
					const jsonStream = JSON.stringify(tracks);
					connection.invoke("StartScreenShare", RoomID, userId, jsonStream)

					startShare(stream)

				})
				.catch(error => {
					console.error('Error starting screen sharing:', error);
				});
		};

		const stopScreenSharing = () => {
			connection.invoke('StopScreenShare', RoomID, userId)
				.catch(error => {
					console.error('Error invoking StopScreenShare:', error);
				});
		};

		const startShare = (stream) => {
			screenShareContainer.style.display = 'block';

			const screenTrack = stream.getTracks().find(track => track.kind === 'video');
			screenTrackShareScreen = screenTrack;

			screenTrack.onended = () => {
				console.log('Screen sharing stopped');
				screenShareContainer.style.display = 'none';
				isShareScreen = !isShareScreen;
			};

			screenVideo.srcObject = stream;
			screenVideo.addEventListener('loadedmetadata', () => {
				screenVideo.play();
			});
		}

	</script>

	<script>
		var connectionChat = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

		document.getElementById("sendButton").disabled = true;

		connectionChat.on("ReceiveMessage", function (user, message) {
			var li = document.createElement("li");
			document.getElementById("messagesList").appendChild(li);
			var time = currentTimeVN();
			li.textContent = `${user} says: ${message} (${time})`;

		});

		connectionChat.start().then(function () {
			document.getElementById("sendButton").disabled = false;
		}).catch(function (err) {
			return console.error(err.toString());
		});

		document.getElementById("sendButton").addEventListener("click", sendMessage);
		function currentTimeVN() {
			var date = new Date();
			// Lấy giờ và phút
			var hours = date.getHours();
			var minutes = date.getMinutes();
			return `${hours}:${minutes}`;
		}
		function sendMessage(event) {
			var user = "@ViewBag.nameUser";//document.getElementById("userInput").value;
			var message = document.getElementById("messageInput").value;
			if (message) {
				connectionChat.invoke("SendMessage", user, message).catch(function (err) {
					return console.error(err.toString());
				});
				event.preventDefault();
				document.getElementById("messageInput").value = "";
			}
		}

		const inputElement = document.getElementById("messageInput");

		inputElement.addEventListener("keydown", function (event) {
			if (event.keyCode === 13) {
				event.preventDefault(); // Ngăn chặn hành vi mặc định của phím "Enter" (như submit form)

				const inputValue = inputElement.value.trim();

				if (inputValue != "") {
					sendMessage(event);
				}
			}
		});
	</script>
	<script src="~/js/VideoCall.js"></script>
</body>

</html>